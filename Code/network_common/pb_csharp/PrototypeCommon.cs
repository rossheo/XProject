// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: prototype_common.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace PbPrototype {

  /// <summary>Holder for reflection information generated from prototype_common.proto</summary>
  public static partial class PrototypeCommonReflection {

    #region Descriptor
    /// <summary>File descriptor for prototype_common.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PrototypeCommonReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChZwcm90b3R5cGVfY29tbW9uLnByb3RvEgxwYl9wcm90b3R5cGUiLAoGVW5p",
            "dElkEhEKCXVuaXRfdHlwZRgBIAEoDRIPCgd1bml0X2lkGAIgASgNIkUKDlBs",
            "YXllclVuaXREYXRhEiUKB3VuaXRfaWQYASABKAsyFC5wYl9wcm90b3R5cGUu",
            "VW5pdElkEgwKBG5hbWUYAiABKAkiQgoLTlBDVW5pdERhdGESJQoHdW5pdF9p",
            "ZBgBIAEoCzIULnBiX3Byb3RvdHlwZS5Vbml0SWQSDAoEbmFtZRgCIAEoCWIG",
            "cHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::PbPrototype.UnitId), global::PbPrototype.UnitId.Parser, new[]{ "UnitType", "UnitId_" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbPrototype.PlayerUnitData), global::PbPrototype.PlayerUnitData.Parser, new[]{ "UnitId", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbPrototype.NPCUnitData), global::PbPrototype.NPCUnitData.Parser, new[]{ "UnitId", "Name" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class UnitId : pb::IMessage<UnitId> {
    private static readonly pb::MessageParser<UnitId> _parser = new pb::MessageParser<UnitId>(() => new UnitId());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnitId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbPrototype.PrototypeCommonReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnitId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnitId(UnitId other) : this() {
      unitType_ = other.unitType_;
      unitId_ = other.unitId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnitId Clone() {
      return new UnitId(this);
    }

    /// <summary>Field number for the "unit_type" field.</summary>
    public const int UnitTypeFieldNumber = 1;
    private uint unitType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnitType {
      get { return unitType_; }
      set {
        unitType_ = value;
      }
    }

    /// <summary>Field number for the "unit_id" field.</summary>
    public const int UnitId_FieldNumber = 2;
    private uint unitId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnitId_ {
      get { return unitId_; }
      set {
        unitId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnitId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnitId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnitType != other.UnitType) return false;
      if (UnitId_ != other.UnitId_) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnitType != 0) hash ^= UnitType.GetHashCode();
      if (UnitId_ != 0) hash ^= UnitId_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnitType != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UnitType);
      }
      if (UnitId_ != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(UnitId_);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnitType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnitType);
      }
      if (UnitId_ != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnitId_);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnitId other) {
      if (other == null) {
        return;
      }
      if (other.UnitType != 0) {
        UnitType = other.UnitType;
      }
      if (other.UnitId_ != 0) {
        UnitId_ = other.UnitId_;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnitType = input.ReadUInt32();
            break;
          }
          case 16: {
            UnitId_ = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerUnitData : pb::IMessage<PlayerUnitData> {
    private static readonly pb::MessageParser<PlayerUnitData> _parser = new pb::MessageParser<PlayerUnitData>(() => new PlayerUnitData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerUnitData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbPrototype.PrototypeCommonReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerUnitData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerUnitData(PlayerUnitData other) : this() {
      UnitId = other.unitId_ != null ? other.UnitId.Clone() : null;
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerUnitData Clone() {
      return new PlayerUnitData(this);
    }

    /// <summary>Field number for the "unit_id" field.</summary>
    public const int UnitIdFieldNumber = 1;
    private global::PbPrototype.UnitId unitId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbPrototype.UnitId UnitId {
      get { return unitId_; }
      set {
        unitId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerUnitData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerUnitData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(UnitId, other.UnitId)) return false;
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (unitId_ != null) hash ^= UnitId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (unitId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(UnitId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (unitId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UnitId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerUnitData other) {
      if (other == null) {
        return;
      }
      if (other.unitId_ != null) {
        if (unitId_ == null) {
          unitId_ = new global::PbPrototype.UnitId();
        }
        UnitId.MergeFrom(other.UnitId);
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (unitId_ == null) {
              unitId_ = new global::PbPrototype.UnitId();
            }
            input.ReadMessage(unitId_);
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NPCUnitData : pb::IMessage<NPCUnitData> {
    private static readonly pb::MessageParser<NPCUnitData> _parser = new pb::MessageParser<NPCUnitData>(() => new NPCUnitData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NPCUnitData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbPrototype.PrototypeCommonReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NPCUnitData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NPCUnitData(NPCUnitData other) : this() {
      UnitId = other.unitId_ != null ? other.UnitId.Clone() : null;
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NPCUnitData Clone() {
      return new NPCUnitData(this);
    }

    /// <summary>Field number for the "unit_id" field.</summary>
    public const int UnitIdFieldNumber = 1;
    private global::PbPrototype.UnitId unitId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbPrototype.UnitId UnitId {
      get { return unitId_; }
      set {
        unitId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NPCUnitData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NPCUnitData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(UnitId, other.UnitId)) return false;
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (unitId_ != null) hash ^= UnitId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (unitId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(UnitId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (unitId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UnitId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NPCUnitData other) {
      if (other == null) {
        return;
      }
      if (other.unitId_ != null) {
        if (unitId_ == null) {
          unitId_ = new global::PbPrototype.UnitId();
        }
        UnitId.MergeFrom(other.UnitId);
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (unitId_ == null) {
              unitId_ = new global::PbPrototype.UnitId();
            }
            input.ReadMessage(unitId_);
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
